{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#lslvariablereplacer","title":"LSL.VariableReplacer","text":"<p>A library to provide variable replacement functionality. A source string can be taken by a configured variable replacer and a processed string will be returned by the use of the configured variable replacer.</p> <p>Each variable value can reference other variables and a cyclic reference check will be performed upon execution of the <code>ReplaceVariables</code> method of a created <code>IVariableReplacer</code></p>"},{"location":"#quick-start","title":"Quick Start","text":"<p>Using the default settings a variable replacer can be created with the following code:</p> <pre><code>var replacer = new VariableReplacerFactory()\n    .Build(c =&gt; c.AddVariable(\"name\", \"Als\"));\n\nvar result = replacer.ReplaceVariables(\"Hi $(name)\");\n\n// result will have the value \"Hi Als\"\n</code></pre> <p>The default settings expect a variable placeholder to be of the format <code>$(VariableName)</code></p>"},{"location":"dictionaries/","title":"Using Dictionaries","text":"<p>A convenience method <code>AddVariables</code> can be used to quickly add a dictionary of variables as shown below:</p> <p>Note</p> <p>The default value formatter will <code>ToString</code> all object values. A <code>null</code> value results in an empty string being substituted. See here  for customisation of this behaviour.</p> <pre><code>var variableDictionary = new Dictionary&lt;string, object&gt;\n{\n    [\"name\"] = \"Als\",\n    [\"age\"] = 12\n};\n\nvar replacer = new VariableReplacerFactory()\n    .Build(c =&gt; c.AddVariables(variableDictionary));\n\nvar result = replacer.ReplaceVariables(\"Name = $(name), Age = $(age)\");\n\n// result will be \"Name = Als, Age = 12\"\n</code></pre>","tags":["variables"]},{"location":"environmentVariables/","title":"Using Environment Variables","text":"","tags":["variables"]},{"location":"environmentVariables/#simple-configuration","title":"Simple Configuration","text":"<p>You can add environment variables to your variable collection as follows:</p> <p>Note</p> <p>The optional first parameter allows for filtering of environment variables. In this case we are only matching the environment variable that we set up.</p> <p>The optional prefix used in this example is <code>ENV_</code>. This is the default prefix and the parameter could have been omitted in this instance</p> <p>Warning</p> <p>If the <code>ITransformer</code> that is used for the variable replacer cannot handle an environment variable's name then the environment variable will be ignored. This behaviour can be overriden as seen  here</p> <pre><code>Environment.SetEnvironmentVariable(\"NAME\", \"Als\");\n\nvar replacer = new VariableReplacerFactory()\n    .Build(c =&gt; c\n        .AddEnvironmentVariables(key =&gt; key == \"NAME\", prefix: \"ENV_\"));\n\nvar result = replacer.ReplaceVariables(\"Hi $(ENV_NAME)\");\n\n// result will be \"Hi Als\"\n</code></pre>","tags":["variables"]},{"location":"environmentVariables/#advanced-configuration","title":"Advanced Configuration","text":"<p>An overload of the <code>AddEnvironmentVariables</code> method allows for further control of how we select environment variables.</p> <p>The following example shows us disabling the automatic filtering of environment variables if their name is not valid for the <code>ITransformer</code> in use.</p> <p>Note</p> <p>There may be scenarios whereby this is desirable in order to check what variables are being added and which ones are problematic via the exception that is thrown at the point of an <code>IVariableReplacer</code> being created.</p> <pre><code>// This environment variable's key has a '-' in it \n// and the default transformer does not allow this.\nEnvironment.SetEnvironmentVariable(\"ALS-NAME\", \"Als\");\n\n// This will throw an InvalidVariableNamesException with a message \n// that will show the problematic environment variables\nvar replacer = new VariableReplacerFactory()\n    .Build(c =&gt; c\n        .AddEnvironmentVariables(c =&gt; c\n            .DisableInvalidVariableNameFilter()\n            .WithEnvironmentVariableFilter(_ =&gt; true)\n            .WithPrefix(\"MyPrefix_\")));\n</code></pre>","tags":["variables"]},{"location":"object/","title":"Adding Variables From An Object","text":"<p>You can also add an object's properties to the variable collection using the  <code>AddVariablesFromObject</code> method on the configuration object.</p>","tags":["variables"]},{"location":"object/#with-no-customisation","title":"With No Customisation","text":"<p>Note</p> <p>Nested objects will be traversed and a composite key is generated based on the path to the property</p> <pre><code>var replacer = new VariableReplacerFactory()\n    .Build(c =&gt; c.AddVariablesFromObject(new { \n        name = \"Als\", \n        age = 12, \n        other = new { \n            codes = true\n        } \n    }));\n\nvar result = replacer.ReplaceVariables(\"Hello $(name). $(other.codes)\");\n// result will be \"Hello Als. True\"\n</code></pre>","tags":["variables"]},{"location":"object/#with-a-custom-configuration","title":"With a Custom Configuration","text":"<p>If you use the optional <code>configurator</code> parameter then you can specify extra customisation as to how the object is queried and the variables are created.</p>","tags":["variables"]},{"location":"object/#with-a-custom-variable-name-prefix","title":"With a Custom Variable Name Prefix","text":"<p>You can provide a string that will prefix all the generated variable names if you need to further namespace the generated variable names.</p> <pre><code>var replacer = new VariableReplacerFactory()\n    .Build(c =&gt; c.AddVariablesFromObject(new\n    {\n        name = \"Als\",\n        age = 12,\n        other = new\n        {\n            codes = true\n        }\n    },\n    c =&gt; c.WithPrefix(\"MyObj.\")\n));\n\nvar result = replacer.ReplaceVariables(\n    \"Hello $(MyObj.name). $(MyObj.other.codes)\"\n);\n// result will be \"Hello Als. True\"\n</code></pre>","tags":["variables"]},{"location":"object/#with-a-custom-property-path-separator","title":"With a Custom Property Path Separator","text":"<p>You can provide a string to use as an alternative to the default property path separator of <code>.</code> as follows:</p> <p>Warning</p> <p>The value of the separator can cause the build of an <code>IVariableReplacer</code> to fail if the <code>ITransformer</code> that is utilised cannot handle a variable name that is used.</p> <p>The default transformer will throw an exception if a variable is added with a name that collides with its settings and provide information about how to fix the issue.</p> <pre><code>var replacer = new VariableReplacerFactory()\n    .Build(c =&gt; c.AddVariablesFromObject(new { \n        name = \"Als\", \n        age = 12, \n        other = new { \n            codes = true\n        }\n    },\n    c =&gt; c.WithPropertyPathSeparator(\"_\")));\n\nvar result = replacer.ReplaceVariables(\"Hello $(name). $(other_codes)\");\n\n// result will be \"Hello Als. True\"\n</code></pre>","tags":["variables"]},{"location":"object/#with-a-property-filter","title":"With a Property Filter","text":"<p>A filter can be passed in to allow you to filter properties from the passed in object. The following example shows how this can be performed on a property name and the object traversal path:</p> <pre><code>var replacer = new VariableReplacerFactory()\n    .Build(c =&gt; c.AddVariablesFromObject(new { \n        name = \"Als\", \n        age = 12, \n        other = new { \n            codes = true\n        },\n        never = new {\n            ommitted = true\n        } \n    },\n    c =&gt; c.WithPropertyFilter(\n        p =&gt; p.Property.Name != string.Empty &amp;&amp; p.ParentPath != \"never\"\n    )\n));\n\nvar result = replacer.ReplaceVariables(\n    \"Hello $(name). $(other.codes) $(never_omitted)\"\n);\n\n// result will be \"Hello Als. True NOTFOUND:never_omitted\");\n</code></pre>","tags":["variables"]},{"location":"object/#advanced-scenarios","title":"Advanced Scenarios","text":"<p>If you require more advanced scenarios for inspecting an object then it is probably best to use a third party library for querying an object and extracting data.</p>","tags":["variables"]},{"location":"variables/","title":"Variables Within Variables","text":"<p>Variables can reference other variables. This allows for composing of your data and preventing repeated code.</p>","tags":["variables","cycle","embed","embedded"]},{"location":"variables/#an-example","title":"An example","text":"<p>The following code shows us setting up a <code>FirstName</code> variable and a <code>LastName</code> variable. We also setup a <code>FullName</code> variable that uses both <code>FirstName</code> and <code>LastName</code> to resolve its content:</p> <pre><code>var replacer = new VariableReplacerFactory()\n    .Build(c =&gt; c.AddVariables(new Dictionary&lt;string, object&gt;\n    {\n        [\"FirstName\"] = \"Al\",\n        [\"LastName\"] = \"Jones\",\n        [\"FullName\"] = \"$(FirstName) $(LastName)\"\n    }));\n\nvar result = replacer.ReplaceVariables(\n    \"Hello $(FullName). Can I call you $(FirstName)?\"\n);\n// result will be \"Hello Al Jones. Can I call you Al?\"\n</code></pre>","tags":["variables","cycle","embed","embedded"]},{"location":"variables/#cyclic-references","title":"Cyclic References","text":"<p>When resolving a variable, if a cyclic dependency is detected then a <code>CyclicReferenceException</code> is thrown that highlights the cyclic path.</p> <p>Note</p> <p>Versions <code>1.0.30</code> and earlier would throw an <code>ArgumentException</code></p> <p>This example shows this in effect:</p> <pre><code>var replacer = new VariableReplacerFactory()\n    .Build(c =&gt; c.AddVariables(new Dictionary&lt;string, object&gt;\n    {\n        [\"FirstName\"] = \"Al\",\n        [\"LastName\"] = \"Jones\",\n        [\"FullName\"] = \"$(FirstName) $(LastName) $(Other)\",\n        [\"Other\"] = \"Stuff $(Another)\",\n        [\"Another\"] = \"$(FullName)\"\n    }));\n\n// This wil throw an exception\nvar result = replacer.ReplaceVariables(\n    \"Hello $(FullName). Can I call you $(FirstName)?\"\n);\n</code></pre>","tags":["variables","cycle","embed","embedded"]},{"location":"z-cloning/","title":"Cloning and Rebuilding","text":"","tags":["partial","clone","cloning","inheritance"]},{"location":"z-cloning/#using-the-default-dictionary-cloner","title":"Using the default dictionary cloner","text":"<p>Sometimes it may be beneficial to have a base <code>IVariableReplacer</code> that can be further customised later on in the execution of your application.</p> <p>This can be seen as utilising inheritance or even a partial definition of a variable replacer.</p> <p>In reality an <code>IVariableReplacer</code> is immutable so this is where the <code>CloneAndConfigure</code> extension method  of an <code>IVariableReplacer</code> comes into play:</p> <p>Note</p> <p>The cloning does a shallow clone of the variables and copies all the other settings across from the original <code>IVariableReplacer</code>. A custom cloning function can be passed in as an extra argument as demonstrated here</p> <pre><code>var replacer = new VariableReplacerFactory()\n    .Build(c =&gt; c.AddVariables(new Dictionary&lt;string, object&gt;\n    {\n        [\"FirstName\"] = \"Al\",\n        [\"LastName\"] = \"Jones\",\n        [\"FullName\"] = \"$(FirstName) $(LastName)\"\n    }));\n\nvar result = replacer.ReplaceVariables(\n    \"Hello $(FullName). Can I call you $(FirstName)?\"\n);\n// result should be \"Hello Al Jones. Can I call you Al?\"\n\n// We configure the second replacer to allow us to replace existing variables.\n// Whilst configuring we can replace variables in the cloned collection.\n// After creation it is set back to not allow the addition of duplicate\n// variable names.\nvar replacer2 = replacer.CloneAndConfigure(c =&gt; c\n    .AddVariable(\"FirstName\", \"Other\"));\n\nvar result2 = replacer2.ReplaceVariables(\n    \"Hello $(FullName). Can I call you $(FirstName)?\"\n);\n// result2 should be \"Hello Other Jones. Can I call you Other?\"\n\nvar firstName = replacer.Variables[\"FirstName\"];\n// firstName should be \"Al\" as the clone will \n// ensure that the initial replacer is preserved\n\nvar firstName2 = replacer2.Variables[\"FirstName\"];\n// firstName2 should be \"Other\"\n</code></pre>","tags":["partial","clone","cloning","inheritance"]},{"location":"z-cloning/#using-the-a-custom-dictionary-cloner","title":"Using the a custom dictionary cloner","text":"<pre><code>var replacer = new VariableReplacerFactory()\n    .Build(c =&gt; c.AddVariables(new Dictionary&lt;string, object&gt;\n    {\n        [\"FirstName\"] = \"Al\",\n        [\"LastName\"] = \"Jones\",\n        [\"FullName\"] = \"$(FirstName) $(LastName)\"\n    }));\n\nvar result = replacer.ReplaceVariables(\n    \"Hello $(FullName). Can I call you $(FirstName)?\"\n);\n// result should be \"Hello Al Jones. Can I call you Al?\"\n\n// We configure the second replacer to allow us to replace existing variables.\n// Whilst configuring we can replace variables in the cloned collection.\n// After creation it is set back to not allow the addition of duplicate\n// variable names.\nvar replacer2 = replacer.CloneAndConfigure(c =&gt; c\n    .AddVariable(\"FirstName\", \"Other\"),\n\n    // This custom cloner just returns the same dictionary\n    // which results in any variable changes being replicated\n    // in `replacer` and `replacer2`\n    originalDictionary =&gt; originalDictionary);\n\nvar result2 = replacer2.ReplaceVariables(\n    \"Hello $(FullName). Can I call you $(FirstName)?\"\n);\n// result2 should be \"Hello Other Jones. Can I call you Other?\"\n\nvar firstName = replacer.Variables[\"FirstName\"];\n// firstName should be \"Other\" as  \n// we have shared the dictionary\n\nvar firstName2 = replacer2.Variables[\"FirstName\"];\n// firstName2 should be \"Other\"\n</code></pre>","tags":["partial","clone","cloning","inheritance"]},{"location":"customisation/valueFormatter/","title":"Value Formatter","text":"<p>The default value formatter will return the <code>ToString</code> value of the variable. A <code>null</code> value will return an empty string.</p>"},{"location":"customisation/valueFormatter/#basic-example","title":"Basic Example","text":"<p>Configuring a custom behaviour to format the variable value can be provided as shown below:</p> <p>Note</p> <p>The value formatter can be used to format different types of object dependent on your needs.</p> <pre><code>var replacer = new VariableReplacerFactory()\n    .Build(c =&gt; c.AddVariable(\"name\", \"Als\")\n    .WithValueFormatter(o =&gt; $\"!{o}!\"));\n\nvar result = replacer.ReplaceVariables(\"Hello $(name)\");\n\n// result will be \"Hello !Als!\"\n</code></pre>"},{"location":"customisation/valueFormatter/#per-type-formatting","title":"Per Type Formatting","text":"<p>The following example will format a date in a <code>dd/MM/YYY</code> format. Any other data type will be formatted with <code>ToString</code></p> <pre><code>var now = new DateTime(2010, 1, 1);\nvar replacer = new VariableReplacerFactory()\n    .Build(c =&gt; c.AddVariable(\"name\", \"Als\").AddVariable(\"today\", now)\n        .WithValueFormatter(o =&gt; o switch\n        {\n            DateTime v =&gt; v.ToString(\"dd/MM/yyyy\"),\n            _ =&gt; $\"{o}\"\n        }));\n\nvar result = replacer.ReplaceVariables(\"Hello $(name). Today is $(today)\");\n// result will be \"Hello Als. Today is 01/01/2010\"\n</code></pre>"},{"location":"customisation/variableNotFound/","title":"When a Variable is not found","text":"<p>The default behaviour for when a variable is not found is to replace the variable placeholder with a string that indicates this.</p> <p>For example, if the variable <code>name</code> has not been added then a source string of <code>Hi $(name)</code> would result in a value of <code>Hi NOTFOUND:name</code></p> <p>The following examples show how to customise this behaviour.</p>"},{"location":"customisation/variableNotFound/#whenvariablenotfound","title":"WhenVariableNotFound","text":"<p>This method can be used to customise the message returned.</p> <p>Note</p> <p>Your method could throw an exception rather than return a replacement</p> <pre><code>var replacer = new VariableReplacerFactory()\n    .Build(c =&gt; c.WhenVariableNotFound(variableName =&gt; $\"ERROR:{variableName}\"));\n\nvar result = replacer.ReplaceVariables(\"Hello $(Unknown)\");\n\n// result will be \"Hello ERROR:Unknown\"\n</code></pre>"},{"location":"customisation/variableNotFound/#throwifvariablenotfound","title":"ThrowIfVariableNotFound","text":"<p>This method will ensure an <code>ArgumentException</code> is thrown if a variable is not found. The message of the exception would be <code>Variable 'Unknown' not found</code> when the missing variable is called <code>Unknown</code>.</p> <p>The following example shows how to set it up:</p> <pre><code>var sut = new VariableReplacerFactory()\n    .Build(c =&gt; c.ThrowIfVariableNotFound());\n\n// The following code will throw an ArgumentException\nvar result = sut.ReplaceVariables(\"Hello $(Unknown)\");\n</code></pre>"},{"location":"customisation/z-defaultTransformer/","title":"The Default Transformer","text":"<p>The default transformer uses a regular expression to match the variables in a source string. This can be customised using the <code>WithDefaultTransformer</code> method on the configuration object.</p>"},{"location":"customisation/z-defaultTransformer/#custom-variable-delimeters","title":"Custom Variable Delimeters","text":"<p>The default format searches for variables of the format <code>$(VariableName)</code>. This can be customised as follows: </p> <pre><code>var replacer = new VariableReplacerFactory()\n    .Build(c =&gt; c\n        .WithDefaultTransformer(\"$${\", \"}\")\n        .AddVariables(new Dictionary&lt;string, object&gt;\n        {\n            [\"FirstName\"] = \"Al\",\n            [\"LastName\"] = \"Jones\"\n        }));\n\nvar result = replacer.ReplaceVariables(\n    \"Hello $${FirstName} $${LastName}. Can I call you $${FirstName}?\"\n);\n\n// result will be \"Hello Al Jones. Can I call you Al?\"\n</code></pre>"},{"location":"customisation/z-defaultTransformer/#custom-regex-options","title":"Custom Regex Options","text":"<p>The default <code>RegexOptions</code> are setup as <code>RegexOptions.Compiled</code>.</p> <p>This can be customised as follows:</p> <pre><code>// The replacer's regular expression will now not be compiled\nvar replacer = new VariableReplacerFactory()\n    .Build(c =&gt; c\n        .WithDefaultTransformer(regexOptions: RegexOptions.None)\n        .AddVariables(new Dictionary&lt;string, object&gt;\n        {\n            [\"FirstName\"] = \"Al\",\n            [\"LastName\"] = \"Jones\"\n        }));\n</code></pre>"},{"location":"customisation/z-defaultTransformer/#custom-regex-timeout","title":"Custom Regex Timeout","text":"<p>The default <code>Regex</code> timeout is set to 10 seconds. This can be modified as follows:</p> <pre><code>var replacer = new VariableReplacerFactory()\n    .Build(c =&gt; c\n        .WithDefaultTransformer(regexTimeOut: TimeSpan.FromSeconds(1))\n        .AddVariables(new Dictionary&lt;string, object&gt;\n        {\n            [\"FirstName\"] = \"Al\",\n            [\"LastName\"] = \"Jones\"\n        }));\n\n// our replacer will timeout after 1 second now\nvar result = replacer.ReplaceVariables(\n    \"Hello $(FirstName) $(LastName). Can I call you $(FirstName)?\"\n);\n</code></pre>"},{"location":"customisation/z-defaultTransformer/#custom-commands","title":"Custom Commands","text":"<p>The default transformer allows for extra modification of a formatted value that can enable extension functionality like trimming a string.</p> <p>The following example adds the functionality for a trim command:</p> <p>Note</p> <p>We are using variables within other variables here too.</p> <p>Warning</p> <p>An exception is thrown if a cyclic dependency is detected.</p> <pre><code>var replacer = new VariableReplacerFactory()\n    .Build(c =&gt; c\n        .WithDefaultTransformer(commandProcessor: (command, value) =&gt; \n            command switch\n            {\n                \"trim\" =&gt; value.Trim(),\n                _ =&gt; string.IsNullOrEmpty(command) \n                    ? value\n                    : throw new ArgumentException($\"Unknown command '{command}'\")\n            }\n        )\n        .AddVariables(new Dictionary&lt;string, object&gt;\n        {\n            // The spaces in these values will\n            // be trimmed for \"FullName\"\n            [\"FirstName\"] = \"   Al    \",\n            [\"LastName\"] = \"   Jones   \",\n            [\"FullName\"] = \"$(FirstName:trim) $(LastName:trim)\"\n        }));\n\nvar result = replacer.ReplaceVariables(\"Hello $(FullName)\");\n// result will be \"Hello Al Jones\"\n</code></pre>"},{"location":"customisation/z-defaultTransformer/#using-all-the-options","title":"Using All the Options","text":"<p>Since all the parameters are optional, any combination can be used to configure the default transformer.</p> <p>The following example sets up all options:</p> <pre><code>var replacer = new VariableReplacerFactory()\n    .Build(c =&gt; c\n        .WithDefaultTransformer(\n            \"[\", \n            \"]\", \n            (command, value) =&gt; value, \n            RegexOptions.None, \n            TimeSpan.FromSeconds(1))\n        .AddVariables(new Dictionary&lt;string, object&gt;\n        {\n            [\"FirstName\"] = \"Al\",\n            [\"LastName\"] = \"Jones\"\n        }));\n\n// our replacer will timeout after 1 second now\n// our replacer's regular expression will not be compiled\n// any command will be ignored (i.e. the value will just be returned)\nvar result = replacer.ReplaceVariables(\n    \"Hello [FirstName] [LastName]. Can I call you [FirstName]?\"\n);\n</code></pre>"},{"location":"customisation/zz-customTransformer/","title":"Writing a Custom Transformer","text":"<p>The default transformer should cover most use cases for variable replacement but there may be scenarios whereby you need full control over the parsing of a source string and any subsequent variable replacement.</p>"},{"location":"customisation/zz-customTransformer/#withtransformer","title":"WithTransformer","text":"<p>Using this method we can use a custom transformer:</p> <pre><code>var replacer = new VariableReplacerFactory()\n    .Build(c =&gt; c\n        .WithTransformer(new NotVeryUsefulTransformer())\n        .AddVariable(\"name\", \"Als\"));\n\nvar result = replacer.ReplaceVariables(\"Hi $name$. Where doth $name$ hail from?\");\n\n// result will be \"Hi Als. Where doth Als hail from?\"\n</code></pre> <p>The definition of the (aptly) named transformer is as follows:</p> <p>Warning</p> <p>This code is not intended to be used. It is only provided to show how to interact with the <code>IVariableResolutionContext</code> in your own <code>ITransformer</code> implementation.</p> <p>It does not cover all edge cases and can easily break.</p> <pre><code>internal class NotVeryUsefulTransformer : ITransformer\n{\n    public VariableNameValidationResult IsAValidVariableName(string variableName) =&gt; \n        variableName.Contains('$')\n            ? VariableNameValidationResult.Failed(\n                \"The variable name cannot contain '$'\"\n            )\n            : VariableNameValidationResult.Success();\n\n    public string Transform(IVariableResolutionContext variableResolutionContext)\n    {\n        // Get the source string from the context\n        var sourceString = variableResolutionContext.Source;\n\n        // we will use this to build the replaced string\n        var result = new StringBuilder();\n\n        var index = 0;\n\n        // Loop through each character in the string\n        while (index &lt; sourceString.Length)\n        {            \n            var currentCharacter = sourceString[index];\n\n            // Check to see if we have found the start of a variable\n            if (currentCharacter == '$')\n            {\n                // we build the name of the varaible with this\n                var name = new StringBuilder();\n\n                // Move beyond the $ start character\n                index++;\n\n                // Collect all the variable name characters\n                // until we hit the closing $\n                while (sourceString[index] != '$')\n                {\n                    name.Append(sourceString[index]);\n                    index++;\n                }                \n\n                // resolve the variable value\n                var variableValue = variableResolutionContext\n                    .VariableResolver\n                    .Resolve(name.ToString());\n\n                // Append the value to our result StringBuilder\n                result.Append(variableValue);\n                index++;\n\n                // Continue processing the string\n                continue;\n            }\n\n            // Not at the start of a variable so just append the character\n            result.Append(currentCharacter);\n\n            // Move to the next character\n            index++;       \n        }\n\n        // Return the variable-replaced result\n        return result.ToString();\n    }\n}\n</code></pre>"}]}